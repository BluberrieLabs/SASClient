//
// ApiauthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class ApiauthAPI: APIBase {
    /**
     Create a new user with username & password
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUser(body: LoginData? = nil, completion: @escaping ((_ data: TokenData?,_ error: Error?) -> Void)) {
        createUserWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a new user with username & password
     - POST /api/auth/create
     - Return a JWT token for the user and a refresh token
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "token" : "aeiou",
  "refreshToken" : "aeiou"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TokenData> 
     */
    open class func createUserWithRequestBuilder(body: LoginData? = nil) -> RequestBuilder<TokenData> {
        let path = "/api/auth/create"
        let URLString = SASClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TokenData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Authorize an existing user with username & password
     
     - parameter body: (body)  (optional)
     - parameter web: (query) web request (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func doLogin(body: LoginData? = nil, web: Bool? = nil, completion: @escaping ((_ data: TokenData?,_ error: Error?) -> Void)) {
        doLoginWithRequestBuilder(body: body, web: web).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Authorize an existing user with username & password
     - POST /api/auth/auth
     - Return a JWT token for the user and optionally a refresh token if web=false
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "token" : "aeiou",
  "refreshToken" : "aeiou"
}}]
     
     - parameter body: (body)  (optional)
     - parameter web: (query) web request (optional, default to false)

     - returns: RequestBuilder<TokenData> 
     */
    open class func doLoginWithRequestBuilder(body: LoginData? = nil, web: Bool? = nil) -> RequestBuilder<TokenData> {
        let path = "/api/auth/auth"
        let URLString = SASClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "web": web
        ])
        

        let requestBuilder: RequestBuilder<TokenData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Authorize an existing user with a Facebook credential
     
     - parameter body: (body)  (optional)
     - parameter web: (query) web request (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fbLogin(body: FBToken? = nil, web: Bool? = nil, completion: @escaping ((_ data: TokenData?,_ error: Error?) -> Void)) {
        fbLoginWithRequestBuilder(body: body, web: web).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Authorize an existing user with a Facebook credential
     - POST /api/auth/facebooklogin
     - Return a JWT token for the user and a refresh token
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "token" : "aeiou",
  "refreshToken" : "aeiou"
}}]
     
     - parameter body: (body)  (optional)
     - parameter web: (query) web request (optional, default to false)

     - returns: RequestBuilder<TokenData> 
     */
    open class func fbLoginWithRequestBuilder(body: FBToken? = nil, web: Bool? = nil) -> RequestBuilder<TokenData> {
        let path = "/api/auth/facebooklogin"
        let URLString = SASClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "web": web
        ])
        

        let requestBuilder: RequestBuilder<TokenData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reset user's password
     
     - parameter resettoken: (path) reset token 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetPWD(resettoken: String, body: LoginData? = nil, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        resetPWDWithRequestBuilder(resettoken: resettoken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Reset user's password
     - POST /api/auth/resetpwd/{resettoken}
     - Resets the user's password. Requires the valid reset token to be supplied
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter resettoken: (path) reset token 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<MessageData> 
     */
    open class func resetPWDWithRequestBuilder(resettoken: String, body: LoginData? = nil) -> RequestBuilder<MessageData> {
        var path = "/api/auth/resetpwd/{resettoken}"
        path = path.replacingOccurrences(of: "{resettoken}", with: "\(resettoken)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Request a password reset email
     
     - parameter email: (query) user email 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetPasswd(email: String, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        resetPasswdWithRequestBuilder(email: email).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Request a password reset email
     - GET /api/auth/forgotpwd
     - Reset email sent for specified address
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter email: (query) user email 

     - returns: RequestBuilder<MessageData> 
     */
    open class func resetPasswdWithRequestBuilder(email: String) -> RequestBuilder<MessageData> {
        let path = "/api/auth/forgotpwd"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "email": email
        ])
        

        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
