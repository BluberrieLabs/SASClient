//
// ApiadminAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class ApiadminAPI: APIBase {
    /**
     Add a specific role to a specific user
     
     - parameter id: (path) user id 
     - parameter role: (path) role to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addRole(id: String, role: String, completion: @escaping ((_ data: UserData?,_ error: Error?) -> Void)) {
        addRoleWithRequestBuilder(id: id, role: role).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Add a specific role to a specific user
     - POST /api/admin/user/{id}/{role}
     - Returns the specified user details
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "role" : "aeiou",
  "last" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "facebook" : true,
  "closed" : true,
  "fullname" : "aeiou",
  "locked" : true,
  "userid" : "aeiou",
  "confirmed" : true,
  "email" : "aeiou"
}}]
     
     - parameter id: (path) user id 
     - parameter role: (path) role to add 

     - returns: RequestBuilder<UserData> 
     */
    open class func addRoleWithRequestBuilder(id: String, role: String) -> RequestBuilder<UserData> {
        var path = "/api/admin/user/{id}/{role}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{role}", with: "\(role)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Close the specific user's account
     
     - parameter id: (path) user id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeAcc(id: String, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        closeAccWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Close the specific user's account
     - GET /api/admin/user/{id}/close
     - Returns a message if ok
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter id: (path) user id 

     - returns: RequestBuilder<MessageData> 
     */
    open class func closeAccWithRequestBuilder(id: String) -> RequestBuilder<MessageData> {
        var path = "/api/admin/user/{id}/close"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete the specific user's account
     
     - parameter id: (path) user id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAcc(id: String, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        deleteAccWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete the specific user's account
     - DELETE /api/admin/user/{id}
     - Returns a message if ok
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter id: (path) user id 

     - returns: RequestBuilder<MessageData> 
     */
    open class func deleteAccWithRequestBuilder(id: String) -> RequestBuilder<MessageData> {
        var path = "/api/admin/user/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete the email message for the specified trigger
     
     - parameter trigger: (path) email trigger 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMail(trigger: String, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        deleteMailWithRequestBuilder(trigger: trigger).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete the email message for the specified trigger
     - DELETE /api/admin/mail/{trigger}
     - Returns a confirmation message
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter trigger: (path) email trigger 

     - returns: RequestBuilder<MessageData> 
     */
    open class func deleteMailWithRequestBuilder(trigger: String) -> RequestBuilder<MessageData> {
        var path = "/api/admin/mail/{trigger}"
        path = path.replacingOccurrences(of: "{trigger}", with: "\(trigger)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all users
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllUsers(completion: @escaping ((_ data: [UserData]?,_ error: Error?) -> Void)) {
        getAllUsersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all users
     - GET /api/admin/users
     - Returns a listing of all user details
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example=[ {
  "role" : "aeiou",
  "last" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "facebook" : true,
  "closed" : true,
  "fullname" : "aeiou",
  "locked" : true,
  "userid" : "aeiou",
  "confirmed" : true,
  "email" : "aeiou"
} ]}]

     - returns: RequestBuilder<[UserData]> 
     */
    open class func getAllUsersWithRequestBuilder() -> RequestBuilder<[UserData]> {
        let path = "/api/admin/users"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[UserData]>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the email message for the specified trigger
     
     - parameter trigger: (path) email trigger 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMessage(trigger: String, completion: @escaping ((_ data: SimpleEmail?,_ error: Error?) -> Void)) {
        getMessageWithRequestBuilder(trigger: trigger).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the email message for the specified trigger
     - GET /api/admin/mail/{trigger}
     - Returns the configured message
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "sender" : "aeiou",
  "subject" : "aeiou",
  "triggerTag" : "aeiou",
  "personal" : "aeiou",
  "body" : "aeiou"
}}]
     
     - parameter trigger: (path) email trigger 

     - returns: RequestBuilder<SimpleEmail> 
     */
    open class func getMessageWithRequestBuilder(trigger: String) -> RequestBuilder<SimpleEmail> {
        var path = "/api/admin/mail/{trigger}"
        path = path.replacingOccurrences(of: "{trigger}", with: "\(trigger)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SimpleEmail>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the configured email messages
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMessages(completion: @escaping ((_ data: [SimpleEmail]?,_ error: Error?) -> Void)) {
        getMessagesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the configured email messages
     - GET /api/admin/mail
     - Returns the configured messages
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example=[ {
  "sender" : "aeiou",
  "subject" : "aeiou",
  "triggerTag" : "aeiou",
  "personal" : "aeiou",
  "body" : "aeiou"
} ]}]

     - returns: RequestBuilder<[SimpleEmail]> 
     */
    open class func getMessagesWithRequestBuilder() -> RequestBuilder<[SimpleEmail]> {
        let path = "/api/admin/mail"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[SimpleEmail]>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the available email triggers
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTriggers(completion: @escaping ((_ data: [TriggerData]?,_ error: Error?) -> Void)) {
        getTriggersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the available email triggers
     - GET /api/admin/triggers
     - Returns the email triggers
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example=[ {
  "triggerTag" : "aeiou"
} ]}]

     - returns: RequestBuilder<[TriggerData]> 
     */
    open class func getTriggersWithRequestBuilder() -> RequestBuilder<[TriggerData]> {
        let path = "/api/admin/triggers"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[TriggerData]>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a specific user
     
     - parameter id: (path) user id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(id: String, completion: @escaping ((_ data: UserData?,_ error: Error?) -> Void)) {
        getUserWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a specific user
     - GET /api/admin/user/{id}
     - Returns the specified user details
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "role" : "aeiou",
  "last" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "facebook" : true,
  "closed" : true,
  "fullname" : "aeiou",
  "locked" : true,
  "userid" : "aeiou",
  "confirmed" : true,
  "email" : "aeiou"
}}]
     
     - parameter id: (path) user id 

     - returns: RequestBuilder<UserData> 
     */
    open class func getUserWithRequestBuilder(id: String) -> RequestBuilder<UserData> {
        var path = "/api/admin/user/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the total number of users
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserTotal(completion: @escaping ((_ data: TotalData?,_ error: Error?) -> Void)) {
        getUserTotalWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the total number of users
     - GET /api/admin/totalusers
     - Returns the number of user records
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "total" : 123456789
}}]

     - returns: RequestBuilder<TotalData> 
     */
    open class func getUserTotalWithRequestBuilder() -> RequestBuilder<TotalData> {
        let path = "/api/admin/totalusers"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TotalData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get first to max users
     
     - parameter first: (path) first record 
     - parameter max: (path) last record 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(first: Int32, max: Int32, completion: @escaping ((_ data: [UserData]?,_ error: Error?) -> Void)) {
        getUsersWithRequestBuilder(first: first, max: max).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get first to max users
     - GET /api/admin/users/{first}/{max}
     - Returns a listing of all specified user details
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example=[ {
  "role" : "aeiou",
  "last" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "facebook" : true,
  "closed" : true,
  "fullname" : "aeiou",
  "locked" : true,
  "userid" : "aeiou",
  "confirmed" : true,
  "email" : "aeiou"
} ]}]
     
     - parameter first: (path) first record 
     - parameter max: (path) last record 

     - returns: RequestBuilder<[UserData]> 
     */
    open class func getUsersWithRequestBuilder(first: Int32, max: Int32) -> RequestBuilder<[UserData]> {
        var path = "/api/admin/users/{first}/{max}"
        path = path.replacingOccurrences(of: "{first}", with: "\(first)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{max}", with: "\(max)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[UserData]>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lock the specific user's account
     
     - parameter id: (path) user id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lockAcc(id: String, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        lockAccWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Lock the specific user's account
     - GET /api/admin/user/{id}/lock
     - Returns a message if ok
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter id: (path) user id 

     - returns: RequestBuilder<MessageData> 
     */
    open class func lockAccWithRequestBuilder(id: String) -> RequestBuilder<MessageData> {
        var path = "/api/admin/user/{id}/lock"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a specific role from a specific user
     
     - parameter id: (path) user id 
     - parameter role: (path) role to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeRole(id: String, role: String, completion: @escaping ((_ data: UserData?,_ error: Error?) -> Void)) {
        removeRoleWithRequestBuilder(id: id, role: role).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Remove a specific role from a specific user
     - DELETE /api/admin/user/{id}/{role}
     - Returns the specified user details
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "role" : "aeiou",
  "last" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "facebook" : true,
  "closed" : true,
  "fullname" : "aeiou",
  "locked" : true,
  "userid" : "aeiou",
  "confirmed" : true,
  "email" : "aeiou"
}}]
     
     - parameter id: (path) user id 
     - parameter role: (path) role to add 

     - returns: RequestBuilder<UserData> 
     */
    open class func removeRoleWithRequestBuilder(id: String, role: String) -> RequestBuilder<UserData> {
        var path = "/api/admin/user/{id}/{role}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{role}", with: "\(role)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reopens the specific user's account
     
     - parameter id: (path) user id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reopenAcc(id: String, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        reopenAccWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Reopens the specific user's account
     - GET /api/admin/user/{id}/reopen
     - Returns a message if ok
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter id: (path) user id 

     - returns: RequestBuilder<MessageData> 
     */
    open class func reopenAccWithRequestBuilder(id: String) -> RequestBuilder<MessageData> {
        var path = "/api/admin/user/{id}/reopen"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unlock the specific user's account
     
     - parameter id: (path) user id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unlockAcc(id: String, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        unlockAccWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Unlock the specific user's account
     - GET /api/admin/user/{id}/unlock
     - Returns a message if ok
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter id: (path) user id 

     - returns: RequestBuilder<MessageData> 
     */
    open class func unlockAccWithRequestBuilder(id: String) -> RequestBuilder<MessageData> {
        var path = "/api/admin/user/{id}/unlock"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create or update the email message for the specified trigger
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMail(body: SimpleEmail? = nil, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        updateMailWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create or update the email message for the specified trigger
     - POST /api/admin/mail
     - Returns a confirmation message
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<MessageData> 
     */
    open class func updateMailWithRequestBuilder(body: SimpleEmail? = nil) -> RequestBuilder<MessageData> {
        let path = "/api/admin/mail"
        let URLString = SASClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
