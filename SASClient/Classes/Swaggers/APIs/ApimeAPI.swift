//
// ApimeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class ApimeAPI: APIBase {
    /**
     Update user account
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeDetails(body: LoginData? = nil, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        changeDetailsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update user account
     - POST /api/me/update
     - Updates account with supplied details based on presented refresh tokenid
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<MessageData> 
     */
    open class func changeDetailsWithRequestBuilder(body: LoginData? = nil) -> RequestBuilder<MessageData> {
        let path = "/api/me/update"
        let URLString = SASClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Close user account
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeAccount(completion: @escaping ((_ data: TokenData?,_ error: Error?) -> Void)) {
        closeAccountWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Close user account
     - POST /api/me/close
     - Closes user account based on presented refresh tokenid
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "token" : "aeiou",
  "refreshToken" : "aeiou"
}}]

     - returns: RequestBuilder<TokenData> 
     */
    open class func closeAccountWithRequestBuilder() -> RequestBuilder<TokenData> {
        let path = "/api/me/close"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TokenData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete user account
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAccount(completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        deleteAccountWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete user account
     - DELETE /api/me/delete
     - Deletes user based on presented refresh tokenid
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]

     - returns: RequestBuilder<MessageData> 
     */
    open class func deleteAccountWithRequestBuilder() -> RequestBuilder<MessageData> {
        let path = "/api/me/delete"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a specific user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMe(completion: @escaping ((_ data: UserData?,_ error: Error?) -> Void)) {
        getMeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a specific user
     - GET /api/me/user
     - Returns the specified user details
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "role" : "aeiou",
  "last" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "facebook" : true,
  "closed" : true,
  "fullname" : "aeiou",
  "locked" : true,
  "userid" : "aeiou",
  "confirmed" : true,
  "email" : "aeiou"
}}]

     - returns: RequestBuilder<UserData> 
     */
    open class func getMeWithRequestBuilder() -> RequestBuilder<UserData> {
        let path = "/api/me/user"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Do user logout
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logOut(completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        logOutWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Do user logout
     - POST /api/me/logout
     - Withdraws refresh token based on presented refresh tokenid
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]

     - returns: RequestBuilder<MessageData> 
     */
    open class func logOutWithRequestBuilder() -> RequestBuilder<MessageData> {
        let path = "/api/me/logout"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Refresh token
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func newCred(completion: @escaping ((_ data: TokenData?,_ error: Error?) -> Void)) {
        newCredWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Refresh token
     - GET /api/me/newcred
     - Renews JWT token based on presented refresh tokenid
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "token" : "aeiou",
  "refreshToken" : "aeiou"
}}]

     - returns: RequestBuilder<TokenData> 
     */
    open class func newCredWithRequestBuilder() -> RequestBuilder<TokenData> {
        let path = "/api/me/newcred"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TokenData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Renew refresh token
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func refresh(completion: @escaping ((_ data: TokenData?,_ error: Error?) -> Void)) {
        refreshWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Renew refresh token
     - GET /api/me/exchange
     - Renews refresh token based on presented refresh tokenid
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "token" : "aeiou",
  "refreshToken" : "aeiou"
}}]

     - returns: RequestBuilder<TokenData> 
     */
    open class func refreshWithRequestBuilder() -> RequestBuilder<TokenData> {
        let path = "/api/me/exchange"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TokenData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reopen user account
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reopenAccount(completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        reopenAccountWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Reopen user account
     - POST /api/me/reopen
     - Reopens user account based on presented refresh tokenid
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]

     - returns: RequestBuilder<MessageData> 
     */
    open class func reopenAccountWithRequestBuilder() -> RequestBuilder<MessageData> {
        let path = "/api/me/reopen"
        let URLString = SASClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageData>.Type = SASClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
